type token =
  | IMPORT of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | INERT of (Support.Error.info)
  | TYPE of (Support.Error.info)
  | NAT of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 84 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* IMPORT *);
  258 (* TBOT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* AS *);
  262 (* USTRING *);
  263 (* UNIT *);
  264 (* REF *);
  265 (* UUNIT *);
  266 (* RREF *);
  267 (* CASE *);
  268 (* OF *);
  269 (* LET *);
  270 (* IN *);
  271 (* FIX *);
  272 (* LETREC *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* BOOL *);
  279 (* TIMESFLOAT *);
  280 (* SSOURCE *);
  281 (* SSINK *);
  282 (* UFLOAT *);
  283 (* SUCC *);
  284 (* PRED *);
  285 (* ISZERO *);
  286 (* INERT *);
  287 (* TYPE *);
  288 (* NAT *);
  289 (* UCID *);
  290 (* LCID *);
  291 (* INTV *);
  292 (* FLOATV *);
  293 (* STRINGV *);
  294 (* APOSTROPHE *);
  295 (* DQUOTE *);
  296 (* ARROW *);
  297 (* BANG *);
  298 (* BARGT *);
  299 (* BARRCURLY *);
  300 (* BARRSQUARE *);
  301 (* COLON *);
  302 (* COLONCOLON *);
  303 (* COLONEQ *);
  304 (* COLONHASH *);
  305 (* COMMA *);
  306 (* DARROW *);
  307 (* DDARROW *);
  308 (* DOT *);
    0 (* EOF *);
  309 (* EQ *);
  310 (* EQEQ *);
  311 (* EXISTS *);
  312 (* GT *);
  313 (* HASH *);
  314 (* LCURLY *);
  315 (* LCURLYBAR *);
  316 (* LEFTARROW *);
  317 (* LPAREN *);
  318 (* LSQUARE *);
  319 (* LSQUAREBAR *);
  320 (* LT *);
  321 (* RCURLY *);
  322 (* RPAREN *);
  323 (* RSQUARE *);
  324 (* SEMI *);
  325 (* SLASH *);
  326 (* STAR *);
  327 (* TRIANGLE *);
  328 (* USCORE *);
  329 (* VBAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\004\000\004\000\
\006\000\006\000\006\000\006\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\007\000\
\007\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\013\000\013\000\009\000\009\000\015\000\
\015\000\016\000\016\000\012\000\012\000\012\000\017\000\017\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\011\000\011\000\019\000\018\000\018\000\
\020\000\020\000\021\000\021\000\005\000\005\000\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\001\000\002\000\002\000\002\000\002\000\
\001\000\002\000\002\000\002\000\003\000\001\000\001\000\001\000\
\001\000\003\000\001\000\001\000\003\000\001\000\001\000\003\000\
\001\000\001\000\006\000\006\000\003\000\004\000\006\000\006\000\
\008\000\006\000\001\000\002\000\002\000\002\000\002\000\003\000\
\002\000\002\000\002\000\003\000\001\000\000\000\001\000\001\000\
\003\000\003\000\001\000\003\000\003\000\001\000\001\000\003\000\
\003\000\001\000\001\000\001\000\007\000\001\000\001\000\001\000\
\003\000\001\000\004\000\001\000\003\000\007\000\000\000\001\000\
\001\000\003\000\003\000\001\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\064\000\059\000\000\000\
\001\000\000\000\000\000\000\000\079\000\000\000\004\000\000\000\
\000\000\054\000\000\000\003\000\000\000\000\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\005\000\
\000\000\000\000\076\000\000\000\072\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\015\000\
\016\000\017\000\000\000\019\000\000\000\000\000\022\000\023\000\
\020\000\000\000\000\000\000\000\000\000\009\000\000\000\078\000\
\007\000\008\000\000\000\065\000\000\000\000\000\057\000\000\000\
\002\000\000\000\052\000\053\000\044\000\000\000\000\000\000\000\
\030\000\000\000\000\000\000\000\000\000\000\000\010\000\011\000\
\012\000\000\000\051\000\000\000\047\000\000\000\000\000\000\000\
\067\000\000\000\075\000\074\000\056\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\013\000\018\000\024\000\000\000\027\000\028\000\000\000\
\069\000\031\000\032\000\000\000\034\000\050\000\049\000\000\000\
\000\000\000\000\061\000\000\000\033\000\000\000\000\000"

let yydgoto = "\002\000\
\029\000\030\000\031\000\056\000\053\000\123\000\094\000\095\000\
\124\000\032\000\113\000\033\000\034\000\035\000\125\000\126\000\
\064\000\060\000\114\000\061\000\062\000"

let yysindex = "\027\000\
\001\000\000\000\248\254\229\254\000\000\067\003\153\002\239\254\
\067\003\000\255\153\002\000\000\000\000\067\003\067\003\067\003\
\067\003\234\254\238\254\227\254\000\000\000\000\000\000\067\003\
\000\000\192\002\153\002\008\255\000\000\232\254\000\000\014\003\
\250\254\000\000\043\255\000\000\004\255\006\255\000\000\250\254\
\044\255\005\255\007\255\250\254\012\255\045\255\034\003\250\254\
\250\254\250\254\114\002\114\002\000\000\114\002\153\002\000\000\
\250\254\009\255\000\000\255\254\000\000\016\255\254\254\001\255\
\015\255\001\000\002\003\250\254\241\254\114\002\114\002\114\002\
\013\255\153\002\153\002\114\002\153\002\250\254\000\000\000\000\
\000\000\000\000\021\255\000\000\021\255\021\255\000\000\000\000\
\000\000\186\255\114\002\186\255\011\255\000\000\031\255\000\000\
\000\000\000\000\153\002\000\000\192\002\153\002\000\000\153\002\
\000\000\067\003\000\000\000\000\000\000\024\255\028\255\039\255\
\000\000\010\255\067\255\072\255\034\255\073\255\000\000\000\000\
\000\000\048\255\000\000\030\255\000\000\049\255\036\255\051\255\
\000\000\021\255\000\000\000\000\000\000\052\255\153\002\153\002\
\056\255\013\255\153\002\153\002\153\002\153\002\114\002\000\000\
\186\255\000\000\000\000\000\000\100\255\000\000\000\000\076\255\
\000\000\000\000\000\000\097\255\000\000\000\000\000\000\114\002\
\057\255\153\002\000\000\063\255\000\000\002\003\067\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\255\054\255\000\000\000\000\000\000\000\000\
\000\000\059\255\000\000\000\000\000\000\000\000\000\000\069\000\
\093\000\000\000\033\000\000\000\000\000\000\000\000\000\153\000\
\000\000\000\000\000\000\213\000\000\000\000\000\000\000\017\001\
\077\001\137\001\000\000\000\000\000\000\000\000\000\000\000\000\
\197\001\211\002\000\000\000\000\000\000\060\255\050\255\000\000\
\000\000\000\000\000\000\001\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\255\000\000\064\255\000\000\000\000\133\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\189\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\205\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\160\255"

let yygindex = "\000\000\
\051\000\000\000\251\255\000\000\000\000\217\255\245\255\209\255\
\035\000\193\255\246\255\250\255\000\000\000\000\240\255\000\000\
\030\000\000\000\000\000\032\000\000\000"

let yytablesize = 1155
let yytable = "\040\000\
\025\000\041\000\044\000\106\000\048\000\046\000\037\000\047\000\
\048\000\049\000\050\000\093\000\096\000\048\000\097\000\054\000\
\042\000\057\000\107\000\108\000\059\000\063\000\079\000\055\000\
\080\000\068\000\081\000\001\000\036\000\082\000\109\000\110\000\
\111\000\045\000\052\000\119\000\117\000\120\000\121\000\051\000\
\078\000\065\000\084\000\066\000\038\000\069\000\087\000\070\000\
\071\000\098\000\072\000\127\000\088\000\089\000\043\000\073\000\
\076\000\074\000\058\000\075\000\058\000\099\000\077\000\100\000\
\101\000\102\000\103\000\104\000\115\000\116\000\130\000\118\000\
\137\000\058\000\058\000\135\000\112\000\129\000\090\000\136\000\
\139\000\091\000\138\000\058\000\092\000\140\000\141\000\058\000\
\058\000\058\000\058\000\142\000\143\000\131\000\144\000\059\000\
\063\000\145\000\134\000\068\000\058\000\146\000\167\000\158\000\
\160\000\058\000\147\000\149\000\152\000\161\000\162\000\058\000\
\164\000\166\000\058\000\055\000\105\000\058\000\148\000\046\000\
\163\000\058\000\077\000\071\000\073\000\046\000\128\000\153\000\
\159\000\150\000\151\000\133\000\132\000\154\000\155\000\156\000\
\157\000\025\000\000\000\025\000\000\000\000\000\000\000\000\000\
\025\000\000\000\025\000\000\000\000\000\000\000\025\000\025\000\
\025\000\025\000\000\000\000\000\165\000\000\000\000\000\000\000\
\068\000\000\000\025\000\000\000\000\000\000\000\025\000\025\000\
\025\000\025\000\000\000\070\000\000\000\070\000\000\000\000\000\
\000\000\070\000\070\000\025\000\000\000\025\000\000\000\000\000\
\025\000\025\000\000\000\079\000\025\000\080\000\025\000\081\000\
\000\000\025\000\082\000\083\000\025\000\025\000\025\000\025\000\
\025\000\000\000\000\000\000\000\000\000\025\000\000\000\084\000\
\070\000\085\000\086\000\087\000\000\000\000\000\000\000\070\000\
\000\000\088\000\089\000\122\000\000\000\000\000\000\000\000\000\
\070\000\070\000\000\000\070\000\000\000\000\000\000\000\000\000\
\070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\000\000\000\000\000\091\000\000\000\
\000\000\092\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\004\000\000\000\000\000\000\000\005\000\
\006\000\000\000\000\000\007\000\000\000\008\000\000\000\009\000\
\010\000\011\000\000\000\000\000\012\000\013\000\000\000\014\000\
\000\000\000\000\000\000\015\000\016\000\017\000\018\000\000\000\
\000\000\019\000\020\000\021\000\022\000\023\000\000\000\045\000\
\000\000\024\000\000\000\000\000\045\000\000\000\045\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\027\000\045\000\000\000\
\028\000\000\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\026\000\045\000\026\000\000\000\045\000\000\000\026\000\026\000\
\045\000\000\000\045\000\000\000\000\000\045\000\000\000\000\000\
\045\000\045\000\045\000\035\000\045\000\000\000\000\000\000\000\
\035\000\045\000\035\000\000\000\000\000\000\000\035\000\035\000\
\035\000\035\000\000\000\000\000\000\000\026\000\000\000\000\000\
\000\000\000\000\035\000\000\000\026\000\000\000\035\000\035\000\
\035\000\035\000\000\000\000\000\000\000\026\000\026\000\000\000\
\026\000\000\000\000\000\035\000\029\000\035\000\029\000\000\000\
\000\000\000\000\029\000\029\000\035\000\000\000\035\000\000\000\
\000\000\035\000\000\000\000\000\035\000\035\000\035\000\037\000\
\035\000\000\000\000\000\000\000\037\000\035\000\037\000\000\000\
\000\000\000\000\037\000\037\000\037\000\037\000\000\000\000\000\
\000\000\029\000\000\000\000\000\000\000\000\000\037\000\000\000\
\029\000\000\000\037\000\037\000\037\000\037\000\000\000\000\000\
\000\000\029\000\029\000\000\000\029\000\000\000\000\000\037\000\
\068\000\037\000\068\000\000\000\000\000\000\000\068\000\068\000\
\037\000\000\000\037\000\000\000\000\000\037\000\000\000\000\000\
\037\000\037\000\037\000\039\000\037\000\000\000\000\000\000\000\
\039\000\037\000\039\000\000\000\000\000\000\000\039\000\039\000\
\039\000\039\000\000\000\000\000\000\000\068\000\000\000\000\000\
\000\000\000\000\039\000\000\000\068\000\000\000\039\000\039\000\
\039\000\039\000\000\000\000\000\000\000\068\000\068\000\000\000\
\068\000\000\000\000\000\039\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\039\000\000\000\
\000\000\039\000\000\000\000\000\039\000\039\000\039\000\041\000\
\039\000\000\000\000\000\000\000\041\000\039\000\041\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\000\000\
\000\000\000\000\041\000\041\000\041\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\000\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\041\000\000\000\041\000\000\000\000\000\041\000\000\000\000\000\
\041\000\041\000\041\000\042\000\041\000\000\000\000\000\000\000\
\042\000\041\000\042\000\000\000\000\000\000\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\042\000\000\000\000\000\000\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\042\000\000\000\
\000\000\042\000\000\000\000\000\042\000\042\000\042\000\043\000\
\042\000\000\000\000\000\000\000\043\000\042\000\043\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\000\000\043\000\000\000\000\000\043\000\000\000\000\000\
\043\000\043\000\043\000\038\000\043\000\000\000\000\000\000\000\
\038\000\043\000\038\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\038\000\038\000\
\038\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\038\000\000\000\
\000\000\038\000\000\000\000\000\038\000\038\000\038\000\036\000\
\038\000\000\000\000\000\000\000\036\000\038\000\036\000\000\000\
\000\000\000\000\036\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\000\000\
\000\000\000\000\036\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\036\000\000\000\000\000\036\000\000\000\000\000\
\036\000\036\000\036\000\040\000\036\000\000\000\000\000\000\000\
\040\000\036\000\040\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\040\000\040\000\
\040\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\079\000\040\000\080\000\040\000\081\000\
\000\000\040\000\082\000\083\000\040\000\040\000\040\000\000\000\
\040\000\000\000\000\000\000\000\000\000\040\000\000\000\084\000\
\000\000\085\000\086\000\087\000\000\000\000\000\000\000\000\000\
\000\000\088\000\089\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\
\006\000\000\000\000\000\007\000\000\000\008\000\000\000\009\000\
\010\000\011\000\000\000\090\000\012\000\013\000\091\000\014\000\
\000\000\092\000\000\000\015\000\016\000\017\000\018\000\000\000\
\000\000\000\000\039\000\021\000\022\000\023\000\000\000\000\000\
\000\000\024\000\004\000\000\000\000\000\000\000\005\000\006\000\
\000\000\000\000\007\000\000\000\008\000\000\000\009\000\010\000\
\011\000\000\000\026\000\012\000\013\000\027\000\014\000\058\000\
\028\000\058\000\015\000\016\000\017\000\018\000\000\000\000\000\
\000\000\058\000\021\000\022\000\023\000\000\000\058\000\058\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\000\000\026\000\000\000\000\000\027\000\000\000\000\000\028\000\
\000\000\058\000\000\000\058\000\000\000\000\000\058\000\000\000\
\005\000\006\000\000\000\000\000\058\000\000\000\000\000\058\000\
\009\000\000\000\058\000\058\000\005\000\012\000\013\000\000\000\
\014\000\000\000\000\000\000\000\015\000\016\000\017\000\018\000\
\000\000\012\000\013\000\039\000\021\000\022\000\023\000\000\000\
\005\000\000\000\024\000\018\000\000\000\000\000\000\000\039\000\
\021\000\022\000\023\000\000\000\000\000\012\000\013\000\000\000\
\000\000\000\000\000\000\026\000\067\000\000\000\027\000\018\000\
\000\000\028\000\000\000\039\000\021\000\022\000\023\000\026\000\
\000\000\005\000\027\000\000\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\012\000\013\000\
\000\000\000\000\000\000\026\000\000\000\000\000\027\000\000\000\
\018\000\028\000\000\000\000\000\039\000\021\000\022\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\000\000\000\000\027\000\
\000\000\000\000\028\000"

let yycheck = "\006\000\
\000\000\007\000\009\000\067\000\056\001\011\000\034\001\014\000\
\015\000\016\000\017\000\051\000\052\000\065\001\054\000\045\001\
\034\001\024\000\034\001\035\001\026\000\027\000\002\001\053\001\
\004\001\032\000\006\001\001\000\037\001\009\001\070\000\071\000\
\072\000\034\001\053\001\083\000\076\000\085\000\086\000\062\001\
\047\000\034\001\022\001\068\001\072\001\052\001\026\001\005\001\
\045\001\055\000\045\001\091\000\032\001\033\001\072\001\012\001\
\045\001\053\001\005\001\053\001\007\001\053\001\018\001\065\001\
\049\001\068\001\066\001\053\001\074\000\075\000\040\001\077\000\
\034\001\020\001\021\001\052\001\064\001\067\001\058\001\052\001\
\014\001\061\001\073\001\030\001\064\001\014\001\053\001\034\001\
\035\001\036\001\037\001\019\001\045\001\099\000\065\001\101\000\
\102\000\049\001\104\000\106\000\047\001\066\001\166\000\143\000\
\005\001\052\001\056\001\056\001\053\001\034\001\014\001\058\001\
\056\001\051\001\061\001\066\001\066\000\064\001\130\000\056\001\
\160\000\068\001\068\001\065\001\065\001\065\001\092\000\138\000\
\145\000\135\000\136\000\102\000\101\000\139\000\140\000\141\000\
\142\000\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\012\001\255\255\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\162\000\255\255\255\255\255\255\
\167\000\255\255\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\255\255\012\001\255\255\014\001\255\255\255\255\
\255\255\018\001\019\001\047\001\255\255\049\001\255\255\255\255\
\052\001\053\001\255\255\002\001\056\001\004\001\058\001\006\001\
\255\255\061\001\009\001\010\001\064\001\065\001\066\001\067\001\
\068\001\255\255\255\255\255\255\255\255\073\001\255\255\022\001\
\049\001\024\001\025\001\026\001\255\255\255\255\255\255\056\001\
\255\255\032\001\033\001\034\001\255\255\255\255\255\255\255\255\
\065\001\066\001\255\255\068\001\255\255\255\255\255\255\255\255\
\073\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\058\001\255\255\255\255\061\001\255\255\
\255\255\064\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\255\255\023\001\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\033\001\034\001\035\001\036\001\037\001\255\255\007\001\
\255\255\041\001\255\255\255\255\012\001\255\255\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\058\001\255\255\255\255\061\001\030\001\255\255\
\064\001\255\255\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\012\001\049\001\014\001\255\255\052\001\255\255\018\001\019\001\
\056\001\255\255\058\001\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\007\001\068\001\255\255\255\255\255\255\
\012\001\073\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\255\255\030\001\255\255\056\001\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\065\001\066\001\255\255\
\068\001\255\255\255\255\047\001\012\001\049\001\014\001\255\255\
\255\255\255\255\018\001\019\001\056\001\255\255\058\001\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\007\001\
\068\001\255\255\255\255\255\255\012\001\073\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\049\001\255\255\255\255\255\255\255\255\030\001\255\255\
\056\001\255\255\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\065\001\066\001\255\255\068\001\255\255\255\255\047\001\
\012\001\049\001\014\001\255\255\255\255\255\255\018\001\019\001\
\056\001\255\255\058\001\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\007\001\068\001\255\255\255\255\255\255\
\012\001\073\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\049\001\255\255\255\255\
\255\255\255\255\030\001\255\255\056\001\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\065\001\066\001\255\255\
\068\001\255\255\255\255\047\001\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\056\001\255\255\058\001\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\007\001\
\068\001\255\255\255\255\255\255\012\001\073\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\056\001\255\255\058\001\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\007\001\068\001\255\255\255\255\255\255\
\012\001\073\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\056\001\255\255\058\001\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\007\001\
\068\001\255\255\255\255\255\255\012\001\073\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\056\001\255\255\058\001\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\007\001\068\001\255\255\255\255\255\255\
\012\001\073\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\255\255\056\001\255\255\058\001\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\007\001\
\068\001\255\255\255\255\255\255\012\001\073\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\255\255\255\255\255\255\
\056\001\255\255\058\001\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\007\001\068\001\255\255\255\255\255\255\
\012\001\073\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\255\255\255\255\
\255\255\255\255\255\255\002\001\056\001\004\001\058\001\006\001\
\255\255\061\001\009\001\010\001\064\001\065\001\066\001\255\255\
\068\001\255\255\255\255\255\255\255\255\073\001\255\255\022\001\
\255\255\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\255\255\032\001\033\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\058\001\020\001\021\001\061\001\023\001\
\255\255\064\001\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\255\255\255\255\
\255\255\041\001\003\001\255\255\255\255\255\255\007\001\008\001\
\255\255\255\255\011\001\255\255\013\001\255\255\015\001\016\001\
\017\001\255\255\058\001\020\001\021\001\061\001\023\001\005\001\
\064\001\007\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\034\001\035\001\036\001\037\001\255\255\020\001\021\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\255\255\058\001\255\255\255\255\061\001\255\255\255\255\064\001\
\255\255\047\001\255\255\049\001\255\255\255\255\052\001\255\255\
\007\001\008\001\255\255\255\255\058\001\255\255\255\255\061\001\
\015\001\255\255\064\001\065\001\007\001\020\001\021\001\255\255\
\023\001\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\255\255\020\001\021\001\034\001\035\001\036\001\037\001\255\255\
\007\001\255\255\041\001\030\001\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\020\001\021\001\255\255\
\255\255\255\255\255\255\058\001\047\001\255\255\061\001\030\001\
\255\255\064\001\255\255\034\001\035\001\036\001\037\001\058\001\
\255\255\007\001\061\001\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\020\001\021\001\
\255\255\255\255\255\255\058\001\255\255\255\255\061\001\255\255\
\030\001\064\001\255\255\255\255\034\001\035\001\036\001\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\058\001\255\255\255\255\061\001\
\255\255\255\255\064\001"

let yynames_const = "\
  "

let yynames_block = "\
  IMPORT\000\
  TBOT\000\
  LAMBDA\000\
  TTOP\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  CASE\000\
  OF\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TIMESFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  UFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  INERT\000\
  TYPE\000\
  NAT\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 131 "parser.mly"
      ( fun ctx -> [],ctx )
# 650 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 133 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 662 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 140 "parser.mly"
                   ( fun ctx -> (Import(_2.v)),ctx )
# 670 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 142 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 677 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 144 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 685 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 146 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 693 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 151 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 701 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 153 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 709 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 158 "parser.mly"
                ( _1 )
# 716 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 160 "parser.mly"
      ( fun ctx -> TyRef(_2 ctx) )
# 724 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 162 "parser.mly"
      ( fun ctx -> TySource(_2 ctx) )
# 732 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 164 "parser.mly"
      ( fun ctx -> TySink(_2 ctx) )
# 740 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 169 "parser.mly"
           ( _2 )
# 749 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 171 "parser.mly"
      ( fun ctx -> TyBot )
# 756 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 173 "parser.mly"
      ( fun ctx -> TyTop )
# 763 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 175 "parser.mly"
      ( fun ctx -> TyString )
# 770 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 177 "parser.mly"
      ( fun ctx -> TyUnit )
# 777 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 179 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 787 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 182 "parser.mly"
      ( fun ctx -> TyBool )
# 794 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 184 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 805 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 190 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 815 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 193 "parser.mly"
      ( fun ctx -> TyFloat )
# 822 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 195 "parser.mly"
      ( fun ctx -> TyNat )
# 829 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 201 "parser.mly"
     ( fun ctx -> TyArr(_1 ctx, _3 ctx) )
# 838 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 203 "parser.mly"
            ( _1 )
# 845 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 207 "parser.mly"
      ( _1 )
# 852 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 209 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1, _2.v, _4 ctx, _6 ctx1) )
# 866 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 213 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1, "_", _4 ctx, _6 ctx1) )
# 880 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 217 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 889 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 219 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 900 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 222 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 912 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 224 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 924 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 226 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 941 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 231 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 953 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 235 "parser.mly"
      ( _1 )
# 960 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 237 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 971 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 242 "parser.mly"
      ( fun ctx -> TmRef(_1, _2 ctx) )
# 979 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 244 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 987 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 246 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 996 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 249 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1005 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 251 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1013 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 253 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1021 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 255 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1029 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 259 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1038 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 261 "parser.mly"
      ( _1 )
# 1045 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 265 "parser.mly"
      ( fun ctx i -> [] )
# 1051 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 267 "parser.mly"
      ( _1 )
# 1058 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 271 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1065 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 273 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1074 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 277 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1083 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 279 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1090 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 283 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1100 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 286 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1110 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 289 "parser.mly"
      ( _1 )
# 1117 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 293 "parser.mly"
      ( _1 )
# 1124 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 295 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, "_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1134 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 301 "parser.mly"
      ( _2 )
# 1143 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 303 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1151 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 306 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1158 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 308 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1165 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 310 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1179 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 313 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1186 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 315 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1193 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 317 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1200 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 319 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1210 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 322 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1221 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 328 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1231 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 332 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1238 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 334 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1247 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 338 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1262 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "parser.mly"
      ( fun ctx i -> [] )
# 1268 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 346 "parser.mly"
      ( _1 )
# 1275 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 350 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1282 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 352 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1291 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 356 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1300 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 358 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1307 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    Obj.repr(
# 362 "parser.mly"
      ( fun ctx -> TyVarBind )
# 1313 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 364 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 1321 "parser.ml"
               : 'TyBinder))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
